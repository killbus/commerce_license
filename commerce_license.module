<?php

/**
 * @file
 * Contains commerce_license.module.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_help().
 */
function commerce_license_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the commerce_license module.
    case 'help.page.commerce_license':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('License entities and product behavior') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter(): commerce_product_variation_type_form
 *
 * @see commerce_license_field_widget_form_alter()
 */
function commerce_license_form_commerce_product_variation_type_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $variation_type = $form_state->getFormObject()->getEntity();

  // Add checkboxes to the product variation type form to select the license
  // types that product variations of this type may use.
  $options = array_column(\Drupal::service('plugin.manager.commerce_license_type')->getDefinitions(), 'label', 'id');
  $our_form['license_types'] = [
    '#type' => 'checkboxes',
    '#title' => t("Available license types"),
    '#description' => t("Limits the license types that can be used on products of this type."),
    '#options' => $options,
    '#default_value' => $variation_type->getThirdPartySetting('commerce_license', 'license_types') ?: [],
    // Only show this if the license trait is set on the product variation type.
    '#states' => [
      'visible' => [
        ':input[name="traits[commerce_license]"]' => ['checked' => TRUE],
      ],
    ],
  ];
  // TODO: consider whether to lock this once the product variation type is
  // created or has product variation entities, or at least lock the enabled
  // license types.

  // Insert our form elements into the form after the 'traits' element.
  // The form elements don't have their weight set, so we can't use that.
  $traits_element_form_array_index = array_search('traits', array_keys($form));

  $form = array_merge(
    array_slice($form, 0, $traits_element_form_array_index + 1),
    $our_form,
    array_slice($form, $traits_element_form_array_index + 1)
  );

  $form['actions']['submit']['#submit'][] = 'commerce_license_form_commerce_product_variation_type_form_submit';
}

/**
 * Form submit handler for our alterations to the product variation type form.
 *
 * @see commerce_license_form_commerce_product_variation_type_form_alter()
 */
function commerce_license_form_commerce_product_variation_type_form_submit($form, FormStateInterface $form_state) {
  $value = $form_state->getValue('license_types');
  $license_types = array_filter($value);

  $variation_type = $form_state->getFormObject()->getEntity();
  $variation_type->setThirdPartySetting('commerce_license', 'license_types', $license_types);
  // This is saving it a second time... but Commerce does the same in its form
  // alterations.
  $variation_type->save();
}

/**
 * Implements hook_field_widget_form_alter().
 *
 * @see commerce_license_form_commerce_product_variation_type_form_alter()
 */
function commerce_license_field_widget_form_alter(&$element, FormStateInterface $form_state, $context) {
  /** @var \Drupal\Core\Field\FieldDefinitionInterface $field_definition */
  $field_definition = $context['items']->getFieldDefinition();
  $field_name = $field_definition->getName();
  $entity_type_id = $field_definition->getTargetEntityTypeId();

  if ($field_name == 'license_type' && $entity_type_id == 'commerce_product_variation') {
    // If the plugin ID form element doesn't have an '#options' key, then we
    // can't remove the plugins that should not be allowed here, either because
    // the widget for this field has been changed by an admin, or because the
    // code for the commerce_plugin_item field type widgets has been changed.
    // In which case, just crash rather than allowing access to a license type
    // that shouldn't be allowed. License types can escalate a user's privileges
    // on the site, and so granting license that shouldn't be allowed is a
    // security risk.
    if (!isset($element['target_plugin_id']['#options'])) {
      throw new \Exception("Unable to change the plugin type options on the license_type field on the commerce_product_variation. Check the field widget type.");
    }

    // Get the allowed license types for this product variation type.
    $bundle_name = $field_definition->getTargetBundle();
    $product_variation_type = \Drupal::entityTypeManager()->getStorage('commerce_product_variation_type')->load($bundle_name);
    $license_types = $product_variation_type->getThirdPartySetting('commerce_license', 'license_types') ?: [];

    // Remove plugin IDs from the options array.
    $element['target_plugin_id']['#options'] = array_intersect_key($element['target_plugin_id']['#options'], $license_types);
  }
}

/**
 * Implements hook_theme().
 */
function commerce_license_theme() {
  $theme = [];
  $theme['commerce_license'] = array(
    'render element' => 'elements',
    'file' => 'commerce_license.page.inc',
    'template' => 'commerce_license',
  );
  $theme['commerce_license_content_add_list'] = [
    'render element' => 'content',
    'variables' => ['content' => NULL],
    'file' => 'commerce_license.page.inc',
  ];
  return $theme;
}

/**
* Implements hook_theme_suggestions_HOOK().
*/
function commerce_license_theme_suggestions_commerce_license(array $variables) {
  $suggestions = array();
  $entity = $variables['elements']['#commerce_license'];
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');

  $suggestions[] = 'commerce_license__' . $sanitized_view_mode;
  $suggestions[] = 'commerce_license__' . $entity->bundle();
  $suggestions[] = 'commerce_license__' . $entity->bundle() . '__' . $sanitized_view_mode;
  $suggestions[] = 'commerce_license__' . $entity->id();
  $suggestions[] = 'commerce_license__' . $entity->id() . '__' . $sanitized_view_mode;
  return $suggestions;
}
